import pandas as pd
from wordcloud import WordCloud
import matplotlib.pyplot as plt
from io import BytesIO
from modules.stats import basic_stats, get_word_frequencies, extract_named_entities_natasha, normalize_with_morph
import streamlit as st
import networkx as nx
import matplotlib.pyplot as plt
from collections import Counter


def analyze_book(text, title, author, config):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–Ω–∏–≥–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    """
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = basic_stats(text)

    # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    st.subheader(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–Ω–∏–≥–∏: {title} ({author})")
    st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤", stats["word_count"])
    st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π", stats["sentence_count"])
    st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤", stats["unique_words"])
    st.write(f"–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å–ª–æ–≤–∞: {stats['avg_word_len']} —Å–∏–º–≤–æ–ª–æ–≤")

    if stats["reading_level"] is not None:
        st.write(f"–£—Ä–æ–≤–µ–Ω—å —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ (Flesch): {stats['reading_level']:.2f}")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–ª–∞–∫–∞ —Å–ª–æ–≤
    if config.get("wordcloud", {}).get("enabled", False):
        st.subheader("‚òÅÔ∏è –û–±–ª–∞–∫–æ —Å–ª–æ–≤")
        selected_pos = config["wordcloud"]["pos"]
        min_freq = config["wordcloud"]["min_freq"]
        background_color = config["wordcloud"]["background"]
        colormap = config["wordcloud"]["colormap"]

        freqs = get_word_frequencies(text, allowed_pos=selected_pos)
        filtered_freqs = {word: freq for word, freq in freqs.items() if freq >= min_freq}

        if filtered_freqs:
            wordcloud = WordCloud(
                width=600,
                height=300,
                background_color=background_color,
                colormap=colormap
            ).generate_from_frequencies(filtered_freqs)

            fig, ax = plt.subplots(figsize=(8, 4))
            ax.imshow(wordcloud, interpolation="bilinear")
            ax.axis("off")
            st.pyplot(fig)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            img_buffer = BytesIO()
            wordcloud.to_image().save(img_buffer, format='PNG')
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å PNG",
                data=img_buffer.getvalue(),
                file_name="wordcloud.png",
                mime="image/png"
            )
        else:
            st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–ª–∞–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∏–∑–∏—Ç—å –ø–æ—Ä–æ–≥ —á–∞—Å—Ç–æ—Ç—ã.")

    # –ê–Ω–∞–ª–∏–∑ Named Entity Recognition (NER)
    if config.get("ner", False):
        st.subheader("üßç‚Äç‚ôÇÔ∏è –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ (NER)")

        ner_data = extract_named_entities_natasha(text, config["ner"])

        if ner_data:
            ent_tables = []
            for ent_type, entities in ner_data.items():
                label = ent_type
                sorted_entities = sorted(entities.items(), key=lambda x: x[1], reverse=True)[:10]
                df = pd.DataFrame(sorted_entities, columns=["–°—É—â–Ω–æ—Å—Ç—å", "–ß–∞—Å—Ç–æ—Ç–∞"])
                ent_tables.append((label, df))

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ 2‚Äì3 –∫–æ–ª–æ–Ω–∫–∏
            for i in range(0, len(ent_tables), 3):
                cols = st.columns(min(3, len(ent_tables) - i))
                for j, (label, df) in enumerate(ent_tables[i:i + 3]):
                    with cols[j]:
                        st.markdown(f"**{label}**")
                        st.dataframe(df, use_container_width=True)
        else:
            st.info("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ NER –Ω–µ –≤—ã–±—Ä–∞–Ω–æ
    if not config.get("ner", False):
        st.error("–î–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑ NER.")
        return  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ NER –Ω–µ –≤—ã–±—Ä–∞–Ω–æ

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    if config.get("graph", False):
        st.subheader("üîó –ì—Ä–∞—Ñ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
        context_size = config.get("context_size", 1)  # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

        G = create_character_interaction_graph(text, config["ner"], context_size)

        if len(G.nodes) > 0:
            # –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞—Ñ
            visualize_character_interaction_graph(G)
        else:
            st.info("–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")


def create_character_interaction_graph(text, selected_ner_labels, context_size=2):
    """
    –°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –ª–æ–∫–∞—Ü–∏–π –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.
    –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏, –ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è –≤ –æ–¥–Ω–æ–º –∏ —Ç–æ–º –∂–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.
    –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Å—É—â–Ω–æ—Å—Ç–∏ (PER, LOC, ORG) –±–µ—Ä—ë–º —Ç–æ–ø-10.
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ —Å NER

    ner_data = extract_named_entities_natasha(text, selected_ner_labels)
    print(text[:100])
    print(selected_ner_labels)
    # –ì—Ä–∞—Ñ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
    interactions = Counter()

    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    sentences = text.split(".")  # –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

    # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    entities = {}
    for label, entities_list in ner_data.items():
        if label in selected_ner_labels:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ç–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
            for entity in entities_list:
                normalized_entity = normalize_with_morph(entity)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º–µ–Ω–∞ —Å –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π
                entities.setdefault(label, {})[normalized_entity] = entity  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ —Ç–∏–ø–∞–º

    # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
    # print("Extracted entities:", entities)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    for i in range(len(sentences) - context_size + 1):
        # –°–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        context = " ".join(sentences[i:i + context_size])

        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        # print(f"Context {i}: {context}")

        characters_in_context = set()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏, –ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        for label in entities:
            for entity in entities[label]:
                if entity in context.lower():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å—É—â–Ω–æ—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                    characters_in_context.add(entities[label][entity])  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Å—É—â–Ω–æ—Å—Ç–∏

        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        # if characters_in_context:
        #     print(f"Found entities in context {i}: {characters_in_context}")

        # –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞/—Å—É—â–Ω–æ—Å—Ç–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
        if len(characters_in_context) > 1:
            characters_in_context = list(characters_in_context)
            for idx, char1 in enumerate(characters_in_context):
                for char2 in characters_in_context[idx + 1:]:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä—ë–±—Ä–∞ –¥–ª—è –≤—Å–µ—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                    interaction = f"{char1} - {char2}"
                    interactions[interaction] += 1

    # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
    G = nx.Graph()

    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Å—É—â–Ω–æ—Å—Ç–∏ (PER, LOC, ORG) –±–µ—Ä—ë–º —Ç–æ–ø-10
    for label in entities:
        # –û—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ø-10 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Å—É—â–Ω–æ—Å—Ç–∏
        top_entities = sorted(entities[label].keys(), key=lambda x: interactions[f"{x} - {x}"], reverse=True)[:10]
        filtered_interactions = {k: v for k, v in interactions.items() if any(entity in k for entity in top_entities)}

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–±—Ä–∞ –≤ –≥—Ä–∞—Ñ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Å—É—â–Ω–æ—Å—Ç–∏
        for interaction, count in filtered_interactions.items():
            char1, char2 = interaction.split(" - ")
            G.add_edge(char1, char2, weight=count)

    # –õ–æ–≥–∏—Ä—É–µ–º –≥—Ä–∞—Ñ
    # print(f"Generated graph: {G.edges(data=True)}")

    return G

def visualize_character_interaction_graph(G):
    """
    –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.
    –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.
    """
    plt.figure(figsize=(12, 10))

    # –†–∞—Å–∫–ª–∞–¥–∫–∞ —É–∑–ª–æ–≤ —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º k –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    pos = nx.spring_layout(G, k=0.5, iterations=50, seed=42)  # –£–º–µ—Ä–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ k

    # –†–∏—Å—É–µ–º –≥—Ä–∞—Ñ
    nx.draw_networkx_nodes(G, pos, node_size=3000, node_color='skyblue', alpha=0.7)
    nx.draw_networkx_edges(G, pos, width=2, alpha=0.5, edge_color='gray')
    nx.draw_networkx_labels(G, pos, font_size=12, font_weight='bold', font_color='black')

    # –ù–∞—Å—Ç—Ä–æ–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    plt.axis('off')
    plt.title("–ì—Ä–∞—Ñ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
    plt.show()

# import networkx as nx
# import plotly.graph_objects as go
#
# def visualize_character_interaction_graph(G):
#     """
#     –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Plotly –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
#     """
#     # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —É–∑–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é layout –∏–∑ NetworkX
#     pos = nx.spring_layout(G, seed=42)
#
#     # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–∑–ª–æ–≤
#     x_nodes = [pos[node][0] for node in G.nodes()]
#     y_nodes = [pos[node][1] for node in G.nodes()]
#
#     # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä—ë–±—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
#     edges = G.edges()
#     x_edges = []
#     y_edges = []
#     for edge in edges:
#         x_edges.append(pos[edge[0]][0])
#         x_edges.append(pos[edge[1]][0])
#         y_edges.append(pos[edge[0]][1])
#         y_edges.append(pos[edge[1]][1])
#
#     # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É Plotly –¥–ª—è —Ä—ë–±–µ—Ä
#     edge_trace = go.Scatter(
#         x=x_edges,
#         y=y_edges,
#         line=dict(width=1, color='gray'),
#         hoverinfo='none',
#         mode='lines'
#     )
#
#     # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É Plotly –¥–ª—è —É–∑–ª–æ–≤
#     node_trace = go.Scatter(
#         x=x_nodes,
#         y=y_nodes,
#         mode='markers',
#         hoverinfo='text',
#         marker=dict(
#             showscale=True,
#             colorscale='Blues',
#             size=10,
#             color=list(range(len(G.nodes()))),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º list(range()) –¥–ª—è —Ü–≤–µ—Ç–æ–≤
#             colorbar=dict(thickness=15, title='Node Connections')
#         )
#     )
#
#     # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —É–∑–ª–µ
#     node_text = []
#     for node in G.nodes():
#         node_text.append(f'Node: {node}')
#     node_trace.text = node_text
#
#     # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
#     fig = go.Figure(data=[edge_trace, node_trace],
#                     layout=go.Layout(
#                         title="–ì—Ä–∞—Ñ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π",
#                         title_font=dict(size=16),  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
#                         showlegend=False,
#                         hovermode='closest',
#                         xaxis=dict(showgrid=False, zeroline=False),
#                         yaxis=dict(showgrid=False, zeroline=False)
#                     ))
#
#     fig.show()